name: "Target for ChatOps"

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'The repository from which the slash command was dispatched'
        required: true
      comment-id:
        description: 'The comment-id of the slash command'
        required: true
      environment:
        description: 'Target Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - release

  # issue_comment:
  #   types:
  #     - created
  #     - edited

# env:
  #PR_NUMBER: ${{ github.event.issue.number }}

jobs:
  deploy:
    # if: ${{  github.event.issue.pull_request && (startsWith(github.event.comment.body, '$deploy') && contains(github.event.comment.body, 'dev')) }}
    name: Deploy ${{ github.event.inputs.environment }}
    environment:
      name: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash

    steps:
      - name: Create URL to the run output
        id: vars
        run: |
          echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
          echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.inputs.repository }}
          comment-id: ${{ github.event.inputs.comment-id }}
          reaction-type: hooray
          body: |
            **Edit:** Deployment targeting "${{ github.event.inputs.environment }}" database completed.
            [Run ID: ${{ github.run_id }}][1]

            [1]: ${{ steps.vars.outputs.run-url }}

            #### PR Deployment Complete ðŸš€
            URL: [https://APP_URL_GOES_HERE](https://APP_URL_GOES_HERE)


      # - uses: actions/github-script@v4
      #   id: get-pr
      #   with:
      #     script: |
      #       const request = {
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.issue.number
      #       }
      #       core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
      #       try {
      #         const result = await github.pulls.get(request)
      #         return result.data
      #       } catch (err) {
      #         core.setFailed(`Request failed with error ${err}`)
      #       }

      # - uses: actions/checkout@v2
      #   with:
      #     repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
      #     ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} # or .head.ref for branch name

      # - name: Add/Update PR
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       const {owner, repo} = context.issue

      #       const output = `#### PR Deployment Complete ðŸš€
      #       *URL: [https://APP_URL_GOES_HERE](https://APP_URL_GOES_HERE)*;

      #       github.issues.updateComment({
      #         owner,
      #         repo,
      #         comment_id: context.payload.comment.id,
      #         body: output
      #       })


      #       github.reactions.createForIssueComment({
      #         owner,
      #         repo,
      #         comment_id: context.payload.comment.id,
      #         content: "rocket",
      #       });

